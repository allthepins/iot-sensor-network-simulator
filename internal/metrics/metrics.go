package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

const namespace = "iot_simulator"

var (
	// ActiveSensors tracks the number of currently running sensors.
	ActiveSensors = promauto.NewGauge(prometheus.GaugeOpts{
		Namespace: namespace,
		Name:      "active_sensors",
		Help:      "The current number of active sensor goroutines.",
	})

	// MessagesSent is a counter for messages sent by sensors, labeled by sensor ID.
	MessagesSent = promauto.NewCounterVec(prometheus.CounterOpts{
		Namespace: namespace,
		Subsystem: "sensor",
		Name:      "messages_sent_total",
		Help:      "Total number of messages sent by each sensor.",
	}, []string{"sensor_id"})

	// GeneratedValues is a histogram of the values generated by sensors.
	GeneratedValues = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Namespace: namespace,
		Subsystem: "sensor",
		Name:      "generated_values",
		Help:      "Distribution of values generated by sensors.",
		Buckets:   prometheus.LinearBuckets(0, 0.1, 10),
	}, []string{"sensor_id"})

	// SensorRestarts is a counter for sensor panics/restarts.
	SensorRestarts = promauto.NewCounterVec(prometheus.CounterOpts{
		Namespace: namespace,
		Subsystem: "sensor",
		Name:      "restarts_total",
		Help:      "Total number of times a sensor has been restarted after a panic.",
	}, []string{"sensor_id"})

	// MessagesReceived is a counter for messages processed by the aggregator.
	MessagesReceived = promauto.NewCounter(prometheus.CounterOpts{
		Namespace: namespace,
		Subsystem: "aggregator",
		Name:      "messages_received_total",
		Help:      "Total number of messages received by the aggregator.",
	})
)
