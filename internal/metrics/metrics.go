package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

const namespace = "iot_simulator"

// Metrics holds all Prometheus collectors for the application.
type Metrics struct {
	ActiveSensors    prometheus.Gauge
	MessagesSent     *prometheus.CounterVec
	GeneratedValues  *prometheus.HistogramVec
	SensorRestarts   *prometheus.CounterVec
	MessagesReceived prometheus.Counter
}

func NewMetrics(reg prometheus.Registerer) *Metrics {
	m := &Metrics{
		ActiveSensors: promauto.NewGauge(prometheus.GaugeOpts{
			Namespace: namespace,
			Name:      "active_sensors",
			Help:      "The current number of active sensor goroutines.",
		}),
		MessagesSent: prometheus.NewCounterVec(prometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: "sensor",
			Name:      "messages_sent_total",
			Help:      "Total number of messages sent by each sensor.",
		}, []string{"sensor_id"}),
		GeneratedValues: prometheus.NewHistogramVec(prometheus.HistogramOpts{
			Namespace: namespace,
			Subsystem: "sensor",
			Name:      "generated_values",
			Help:      "Distribution of values generated by sensors.",
			Buckets:   prometheus.LinearBuckets(0, 0.1, 10),
		}, []string{"sensor_id"}),
		SensorRestarts: prometheus.NewCounterVec(prometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: "sensor",
			Name:      "restarts_total",
			Help:      "Total number of times a sensor has been restarted after a panic.",
		}, []string{"sensor_id"}),
		MessagesReceived: prometheus.NewCounter(prometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: "aggregator",
			Name:      "messages_received_total",
			Help:      "Total number of messages received by the aggregator.",
		}),
	}

	// Register all collectors with the provided registerer.
	reg.MustRegister(
		m.ActiveSensors,
		m.MessagesSent,
		m.GeneratedValues,
		m.SensorRestarts,
		m.MessagesReceived,
	)

	return m
}
